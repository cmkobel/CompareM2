#!/usr/bin/env python

__author__ = "Carl M. Kobel"


# --- Development: Versioning ---------------------------------------
__version__ = "2.14.1"
# Places to bump
#  - here
#  - workflow/Snakefile, because the snakefile can possibly be run without the ./comparem2 binary. Report gets from here.
#  - changelog
# Also, paste changelog into the github release. Use pre-release and publish it after it has been tested.
# Consider testing the "latest-full" CI test https://github.com/cmkobel/CompareM2/actions/workflows/latest-full.yaml


# --- Development: Testing "nightly" --------------------------------

# For developing and testing (using conda) prior to publication of next version apptainer image, you can run the following from the repository directory:
# Conda
# export COMPAREM2_BASE="$(realpath ~/comparem2)"; export COMPAREM2_PROFILE="${COMPAREM2_BASE}/profile/conda/default"; ${COMPAREM2_BASE}/comparem2 --config input_genomes="${COMPAREM2_BASE}/tests/E._faecium/*.fna" --until fast

# If you haven't made any changes to the environment yamls, and there are no new versions of bundled software, you can test using the apptainer/docker image.
# Apptainer
# export COMPAREM2_BASE="$(realpath ~/comparem2)"; export COMPAREM2_PROFILE="${COMPAREM2_BASE}/profile/apptainer/default"; ${COMPAREM2_BASE}/comparem2 --config input_genomes="${COMPAREM2_BASE}/tests/E._faecium/*.fna" --until fast


# --- Development: Update Dockerfile --------------------------------
# Update Dockerfile:
# touch dummy1.fa dummy2.fa dummy3.fa; ./comparem2 --containerize | grep -A 10000 "FROM condaforge" | grep -B 10000 "mamba clean --all -y" > Dockerfile
# And check that there is no  preceding or following text (comparem2 logo, status summary etc.).
# The docker image can then be built: (example only, remember to bump versions)
# sudo docker build -t cmkobel/comparem2:v2.7 . && sudo docker push cmkobel/comparem2:v2.7

# In case the exact same docker image should be used for consecutive versions of comparem2, although this shouldn't be the case when using the minor version for apptainer images only: (example)
# sudo docker pull cmkobel/comparem2:v2.9
# sudo docker tag cmkobel/comparem2:v2.9 cmkobel/comparem2:v2.10
# sudo docker push cmkobel/comparem2:v2.10


# --- Development: Update DAG figure for documentation --------------
# Update dag picture in documentation with this command (with anaconda/graphviz)
# conda install anaconda::graphviz; comparem2 --forceall --rulegraph | dot -Tpng > dag.png

"""
This is the launcher script for comparem2.

It has two main functions.
1) It checks that the necessary environment variables has been set. If not, it uses reasonable defaults.
2) Then it calls the snakemake pipeline using the command line arguments passed to this here script.

Because any command line arguments are passed directly to the subprocess.run()-snakemake call in the bottom of this script, you can use any snakemake-compatible command line argument to this script. E.g: `comparem2 --dry-run`.

This "binary" file works instead of the alias that has been previously used.

"""


import logging
import os 
import sys
import subprocess
import shutil
#import parse_status
import pandas as pd
import random # for tips


# Create logger that prints to the terminal.
logger = logging.getLogger('comparem2_launcher')
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler()
#console_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)


# --- Routines ------------------------------------------------------

def tip_exit(returncode):
    """Generates a random useful tip which can be shown in the end of the pipeline, and exits with the returncode given.""" # Inspired by T. Seemann
    
    tips = list()
    tips.append("The comprehensive documentation is available at https://comparem2.readthedocs.io")
    tips.append("The comprehensive documentation is available at https://comparem2.readthedocs.io")
    tips.append("The comprehensive documentation is available at https://comparem2.readthedocs.io")
    tips.append("If you ever run into any issues running CompareM2, please file it at https://github.com/cmkobel/comparem2/issues")
    tips.append("If you ever run into any issues running CompareM2, please file it at https://github.com/cmkobel/comparem2/issues")
    tips.append("You can use the passthrough parameter feature to pass a custom command line parameter to any tool within CompareM2.")
    tips.append("You can select between bakta (default) or prokka with `comparem2 --config annotator=\"bakta\"`.")
    tips.append("If you work with archaea, you should set the `comparem2 --config annotator=prokka set_prokka--kingdom=archaea` options.")
    tips.append("The M in CompareM2 is for microbes.")
    tips.append("CompareM2 works for bacteria and archaea.")
    tips.append("CompareM2 works for microbial isolates and MAGs.")
    tips.append("CompareM2 works for genomes assembled from both long and short reads.")
    tips.append("The command `comparem2 --status` option only shows the status.")
    tips.append("The command `comparem2 --downloads` checks and downloads all databases.")
    tips.append("The command `comparem2 --help` shows all options directly in the terminal.")
    tips.append("You can select to run specific rules with the `comparem2 --until <rule>` parameter.")
    tips.append("The command `comparem2 --until fast` only runs a few quick jobs.")
    tips.append("CompareM2 was once named 'Assemblycomparator2'.")
    tips.append("If you don't specify any input genomes, CompareM2 runs on the fasta files in the current working directory.")
    tips.append("Make sure you explore the dynamic report that has been generated in the results directory.")
    tips.append("You can add refseq genomes and annotations to your analysis with `comparem2 --config add_refseq=<refseq accession>")
    
    if returncode == 0:
        print(f"Tip: {random.choice(tips)}") # Be nice. Only print a tip if the run completed successfully.
        print(f"Done.")
    else:
        print(f"Done. Exiting with return code '{returncode}'.")
    
    sys.exit(returncode)

    


# --- Read environment variables or set defaults --------------------


# Read system variables and use defaults if necessary.

# Sets the COMPAREM2_BASE to the directory of this python script file which (script file) should be neighboring the correct snakefile.
try:
    COMPAREM2_BASE = os.environ["COMPAREM2_BASE"]
    logger.debug(f"COMPAREM2_BASE was already set to \"{COMPAREM2_BASE}\".")
except KeyError as e:
    COMPAREM2_BASE = os.path.dirname(os.path.realpath(__file__)) # This seems to work even for symlinks (it gets the physical path.). Update: Maybe that is why the apptainer environment can't find the cwd?
    os.environ["COMPAREM2_BASE"] = COMPAREM2_BASE
    logger.debug(f"COMPAREM2_BASE was not set and has been defaulted to \"{COMPAREM2_BASE}\".")

# Defines the COMPAREM2_PROFILE relative to the COMPAREM2_BASE if not set already.
# Detects and prioritizes to use apptainer if it exists.
try:
    COMPAREM2_PROFILE = os.environ["COMPAREM2_PROFILE"]
    logger.debug(f"COMPAREM2_PROFILE was already set to \"{COMPAREM2_PROFILE}\".")
except KeyError as e: # The profile has not been set.
    # We might check whether apptainer is present. If it is we will use it, if not, we'll use conda.
    if shutil.which("apptainer") is not None: # Apptainer exists, use it.
        COMPAREM2_PROFILE = f"{COMPAREM2_BASE}/profile/apptainer/default"
        logger.debug(f"Using apptainer.")
    else: 
        COMPAREM2_PROFILE = f"{COMPAREM2_BASE}/profile/conda/default"
        logger.debug(f"Using conda.")
    
    os.environ["COMPAREM2_PROFILE"] = COMPAREM2_PROFILE
    logger.debug(f"COMPAREM2_PROFILE was not set and has been defaulted to \"{COMPAREM2_PROFILE}\".")

# Defines the COMPAREM2_DATABASES relative to the COMPAREM2_BASE if not set already.
try:
    COMPAREM2_DATABASES = os.environ["COMPAREM2_DATABASES"]
    logger.debug(f"COMPAREM2_DATABASES was already set to \"{COMPAREM2_DATABASES}\".")
except KeyError as e:
    COMPAREM2_DATABASES = f"{COMPAREM2_BASE}/databases"
    os.environ["COMPAREM2_DATABASES"] = COMPAREM2_DATABASES
    logger.debug(f"COMPAREM2_DATABASES was not set and has been defaulted to \"{COMPAREM2_DATABASES}\".")




# --- Define runs ---------------------------------------------------

# Then call the pipeline (alias) using the variables that have just been set, including the command line parameters that have been passed to this script. As we have already saved the new environment variables with os.environ(), we can just call as is.

# I will have to check whether this will work for both conda and apptainer based installations? It should. In the test on bioconda I should use conda (not apptainer).

# Concatenate the trailing command line arguments to add to the snakemake command.
trailing_arguments = sys.argv[1:]
trailing_arguments_concatenated = " ".join(trailing_arguments)
trailing_arguments_concatenated_nostatus = " ".join([i for i in trailing_arguments if i != "--status"]) # Don't propagate --status to snakemake as it is only understood by CompareM2.

logger.debug(f"The concatenated trailing arguments are {trailing_arguments_concatenated}")


def run_help():
    # Show the help file.
    with open(COMPAREM2_BASE + "/docs/help_text.txt") as file:
        for line in file:
            print(line, end = "")
    print()

def run_version():
    print(f"comparem2 v{__version__}")
    return 0

def run_cite():
    print("""
  CompareM2 Citation
  ------------------

  If you use CompareM2, you can support further funding by bumping the
  citation count on this one:

    - Kobel et al. CompareM2 is a genomes-to-report pipeline for comparing microbial genomes. 2024.07.12.603264 Preprint at https://doi.org/10.1101/2024.07.12.603264 (2024).

  CompareM2 would not have existed, if it hadn't been for the
  integrated software packages and their databases. Please cite the
  appropriate tools as well. An updated list is maintained here:

    - https://comparem2.readthedocs.io/en/latest/99%20citation/
    """)
    return 0

def run_status():  
    # This function just presents the summary that is already written into .status.tsv by run_main()
    print("Info: Initializing status.")
    
    def present_status(path = ".status.tsv"): 
    
        try:
            summary = pd.read_csv(path, delimiter="\t") 
        except pd.errors.EmptyDataError as e:
            print("Error: 1) No status data to present based on the inputted genomes.")
            raise e
        except FileNotFoundError as e:
            print("Error: 2) .status.tsv file does not exist. Please run CompareM2 again with the same input files before calling status.")
            raise e
        
        summary = summary.dropna(subset=["rule"])
        #print(summary)
        
        # Hide irrelevant stuff
        #summary = summary.loc[~summary["rule"].str.contains("^gather$")]
        summary = summary.loc[~summary["rule"].str.endswith("_download")]
        summary = summary.loc[~summary["rule"].str.contains("^core_genome_checkpoint$")]
        summary = summary.loc[~summary["rule"].str.contains("^report_env$")]
        summary = summary.loc[~summary["rule"].str.contains("^bakta_env$")]
        summary = summary.loc[~summary["rule"].str.contains("^annotate$")]
        summary = summary.loc[~summary["rule"].str.contains("^get_refseq_annotation$")]
        summary = summary.loc[~summary["rule"].str.contains("^metadata$")]
        
        # Count occurrences of statuses and pivot.
        summary = summary.groupby(["rule", "status"]).size().reset_index().rename(columns={0:"count"})
        summary = summary.pivot(index = "rule", columns = "status", values = "count").rename_axis(None, axis=1).reset_index()
        summary = summary.fillna(0)
        
        # Make sure that at least the ok column exists after pivoting.
        try:
            summary["ok"]
        except KeyError as e:
            # In case any key is missing, fill it with zeros. Could also have been a passive coalesce action with no ifs. But I guess python makes it beautiful even though it is a bit complex.
            for i in e.args:
                #print(f"debug: filling key \"{i}\" with zeros.")
                summary[i] = 0
        
        
        # Calculate interpretative statistic
        final = summary[["rule"]]
        final.insert(1, "ok %", (summary["ok"] / (summary.loc[:, summary.columns != 'rule'].sum(axis = 1)) * 100).astype(int).astype(str) + " %")
        final = final.fillna(0)
        #print(final)
        final.columns = final.columns.str.upper() # To visually separate columns from cells.
    
    
        # If only filtered (downloads, copy etc. ) rules are (were) present, it shouldn't be presented.
        if final.shape[0] == 0:
            print("Info: 2) No status data to present, based on the inputted genomes.")
            return 1
        
        # Present
        print()
        print("  CompareM2 status")
        print("  ----------------")
        print("  Below is an overview of the completion of each rule in the CompareM2 pipeline.")
        print("This summary was computed last time CompareM2 was run.")
        print()
        print(final.to_string(index = False))
        print("//")
        
        
        return 0

    try:
        present_status()
    except Exception:
        return 1
    
    #return returncode_status
    return 0


def run_downloads():
    command_download = f"""snakemake --snakefile "{COMPAREM2_BASE}/workflow/Snakefile" --profile "{COMPAREM2_PROFILE}" --configfile "{COMPAREM2_BASE}/config/config.yaml" --config input_genomes="" --until downloads"""

    return subprocess.run(command_download, shell = True).returncode

def run_main():
    
    
    # Remove the old .status.tsv file so we don't accidentally show an old status if the main job fails.
    if os.path.exists(".status.tsv"):
        os.remove(".status.tsv")    
    
    # Define run commands
    command_main = f"""snakemake --snakefile "{COMPAREM2_BASE}/workflow/Snakefile" --profile "{COMPAREM2_PROFILE}" --configfile "{COMPAREM2_BASE}/config/config.yaml"  """ + trailing_arguments_concatenated 
    
    command_status = f"""snakemake --snakefile "{COMPAREM2_BASE}/workflow/Snakefile" --profile "{COMPAREM2_PROFILE}" --configfile "{COMPAREM2_BASE}/config/config.yaml" """ + trailing_arguments_concatenated_nostatus + """ --until all --summary --quiet all | grep -Pzo "output_file\\tdate\\trule\\tversion\\t(.*\\n)*" > .status.tsv""" 
    # always leave a .status.tsv file for future interesteds.
    # The reason why it says --until all is to try generating all outputs to see what is really there.
    
    

    logger.debug(f"Command to run is\n{command_main}")
    
    # Run comparem2 main pipeline
    print("Info: Initializing main pipeline.")
    process_main = subprocess.run(command_main, shell = True)
    process_status = subprocess.run(command_status, shell = True)
    
    returncode_main = process_main.returncode
    returncode_status = process_status.returncode
    
    
    
    
    # Exit with the return code of the main pipeline.
    return returncode_main


def run_report():
    # Run dynamic report pipeline   
    
    command_report = f"""snakemake --snakefile "$COMPAREM2_BASE/dynamic_report/workflow/Snakefile" --profile "$COMPAREM2_PROFILE" --configfile=.report_config.yaml --quiet all""" # todo: Find out why the comparem2_base and profile are formatted differently here.
    
    # Only run report if there is metadata and something is worth rendering.
    # if os.path.isfile("{output_directory}/metadata.tsv") and os.path.isfile("{output_directory}/.comparem2_void_report.flag"):  # Should be moved to the report pipeline itself.
    
    if os.path.isfile(".report_config.yaml"):
        print("Info: Initializing dynamic report subpipeline.")
        process_report = subprocess.run(command_report, shell = True)
        returncode_report = process_report.returncode
    else:
        #print("Pipeline: .report_config.yaml has not yet been created.") # This happens when doing a dry-run in a new dir.
        pass


# --- Finally, run the pipeline. ------------------------------------

if "--help" in trailing_arguments or "-h" in trailing_arguments: # help
    sys.exit(run_help()) # sys.exit means to exit without using the tip_exit()


elif "--version" in trailing_arguments or "-v" in trailing_arguments: # version
    sys.exit(run_version())


elif "--cite" in trailing_arguments: # cite
    sys.exit(run_cite())


elif "--status" in trailing_arguments: # status
    tip_exit(run_status()) 
    
    
elif "--downloads" in trailing_arguments: # download databases
    tip_exit(run_downloads())
    
    
else: # Main
    
    # Main
    returncode_main = run_main()
    
    # Report
    run_report()
    
    # Status, in case of no dry run
    if not "--dry-run" in trailing_arguments and not "--dryrun" in trailing_arguments and not "-n" in trailing_arguments:
        print("ø", trailing_arguments)
        run_status() 
    
    # Exit
    tip_exit(returncode_main)
    
