# This subpipeline checks if the void report flag (.asscom2_void_report.flag) file has been modified by a rule in the parent pipeline. If so, the report will be rendered.


__version__ = "v2.4.0" 
__author__ = 'Carl M. Kobel'


results_directory = config['results_directory'] # results_ac2
base_variable = config['base_variable'] # path/to/gitrepo/assemblycomparator2
batch_title = config['batch_title'] # E.g. E._faecium 


print('report subpipeline: results_directory:', results_directory)
print('report subpipeline: base_variable:', base_variable)


rule all:
	input: expand("{results_directory}/report_{batch_title}.html", results_directory = results_directory, batch_title = batch_title)


# Runs on the front end because it is quick anyway.
# This rule needs to be inside its own snakefile, as it is the only way I can run it on onerror/onsuccess
rule report:
    input:
        flag = "{results_directory}/.asscom2_void_report.flag", # This is the file being touched when void_report is called in every rule in the parent pipeline.
        metadata = "{results_directory}/metadata.tsv" # Without the metadata, the report doesn't make sense. Most segments use the metadata to translate sample names from files paths.
    conda: "conda_definitions/r-markdown.yaml"
    params: 
        end_script = f"{base_variable}/report_subpipeline/scripts/report_end_script.sh",
        base_variable = base_variable,
        results_directory = results_directory,
        batch_title = batch_title,
    output: "{results_directory}/report_{batch_title}.html"
    #output: expand("{results_directory}/report_{batch_title}.html", results_directory = results_directory, batch_title = batch_title)
    shell: """

        echo "report subpipeline: initializing report ..."
    
        # The rmd will run from the wd where the template is located. Therefore we need to copy it into here before rendering.
        # cp {base_variable}/report_subpipeline/scripts/genomes_to_report_v2.Rmd rmarkdown_template.rmd
        # Rscript -e 'rmarkdown::render("rmarkdown_template.rmd", "html_document", output_file = "{output}", quiet = T)' 
        # rm rmarkdown_template.rmd

        mkdir -p {params.results_directory}/tables # Directory for the rmarkdown to write its compiled tables to.

        Rscript -e '
            base_variable = "{params.base_variable}"
            results_directory = "{params.results_directory}"
            batch_title = "{params.batch_title}"

            rmarkdown::render(
                input = "{base_variable}/report_subpipeline/scripts/genomes_to_report_v3.Rmd",
                output_format = "html_document",
                output_file = "{output}",
                knit_root_dir = "{params.results_directory}",
                quiet = F
            )' 
        

        
        # Use the end script if it exists
        if test -f "{params.end_script}"; then
            echo "report subpipeline: end_script exists."
            . {params.end_script} {batch_title} {results_directory}/report_{batch_title}.html 
        fi
        
        
        # Create a zip archive of the report
        cd {results_directory}
        zip {output}.zip report_{batch_title}.html || echo failed to zip
        
        


        echo "report subpipeline: report written to {output}"
        echo "    ______________________________  "
        echo "   < The report has been rendered > "
        echo "    ------------------------------  "
        echo "           \\   ^__^                "
        echo "            \\  (oo)\\_______        "
        echo "               (__)\\       )\\/\\    "
        echo "                   ||----w |        "
        echo "                   ||     ||        "

    """







# Note: The stderr/out from rule report should not be shown on screen as it problematically wipes possible interesting fail-outputs from the main asscom2 pipeline.
